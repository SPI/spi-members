# Copyright (C) 2001  Craig Small <csmall@debian.org>
# Copyright (C) 2001, 2002, 2003, 2004, 2005  Martin Michlmayr <tbm@cyrius.com>
# Copyright (C) 2003, 2004  Peter Palfrader <weasel@debian.org>
# This file may be distributed under the GPL v2 or higher.

<?
  session_start();
  include("config.inc");
  include("common.inc");

  // Returns appid on success, -1 on failure
  function create_contrib_application($db, $email) {
    if (! ($result = pg_query_params($db,
            "INSERT INTO applications (appdate, member, contribapp, lastchange) SELECT 'now'::date, memid, 't', 'now'::date FROM members WHERE email = $1",
            array($email)))) {

      echo "Problem with interrogating database: ", pg_ErrorMessage($db), "<BR>\n";
      return -1;
    }
    if (($tuples = pg_CmdTuples($result)) != 1) {
      echo "One row should be effected but $tuples rows were<BR>\n";
      return -1;
    }
    if (! ($newres = pg_query($db,
            "SELECT currval('applications_appid_seq')"))) {
      echo "Cannot find your new application: ", pg_ErrorMessage($db), "<BR>\n";
      return -1;
    }
    if (pg_NumRows($newres) != 1) {
      echo "I cannot find your new application in the database, something ";
      echo "went wrong";
      return -1;
    }
    $row = pg_Fetch_Array($newres, 0);
    $appid = $row[0];
    echo "<P>Your application for the Contributing Membership has been ";
    echo "registered successfully.  Your application ID is $appid. ";
    echo "Please update the application form with the relevant details ";
    echo "as soon as possible so that your application can be reviewed ";
    echo "by the membership committee.";

    // Set the default to true since most members will probably want to
    // subscribe.  Only those who are actually approved as CM will be
    // subscribed, so setting this to true now will not hurt.
    pg_query_params($db,
      'UPDATE members SET sub_private = true WHERE email = $1',
      array($email));

//   $body = "$email applied for a contributing membership.\n";
//   $headers = "From: admin@members.spi-inc.org\nX-Mailer: PHP/" . phpversion();
//   mail("admin@members.spi-inc.org", "New SPI contrib member: $email", $body, $headers);
   
    return $appid;
  }

  // Tries to find the latest contrib application, returns -1 if not found.
  // Used as a pre-check for new applications
  function get_latest_application($db, $email) {
    if (! ($query = pg_query_params($db,
            'SELECT a.appid FROM applications a, members m WHERE m.email = $1 AND a.member = m.memid AND a.contribapp = true AND a.approve IS NULL ORDER BY a.appdate DESC, appid DESC',
            array($email)))) {
      echo "<P>Problem with query", pg_errorMessage($db), "<BR>";
      return -1;
    }
    if (pg_NumRows($query) == 0) {
      return -1;
    }
    $row = pg_Fetch_Array($query, 0);
    return $row['appid'];
  }


  function get_application($db, $email, $appid) {
  global $row, $query;

  if (! ($query = pg_query_params($db,
          'SELECT applications.*, members.* FROM members, applications WHERE members.email = $1 AND members.memid = applications.member AND appid = $2',
          array($email, $appid)))) {
    echo "<P>Problem with query", pg_errorMessage($db), "<BR>";
    return FALSE;
  }
  if (pg_NumRows($query) == 0) {
    echo "<P>Application # $appid was not found or it does not belong to $email<br>\n";
    return FALSE;
  }
  $row = pg_Fetch_Array($query, 0);
  return TRUE;
}
  function update_application($db, $form, $mgr_only, $email) {

    $sql = "UPDATE applications SET " .
           get_textarea('contrib', $form['contrib']) ;
    if ($mgr_only) {
      $sql .= ", " . get_text('appdate', $form['appdate']) .
              ", " . get_bool('contribapp', $form['contribapp']) .
	      ", " . get_text('manager', $form['manager']) .
	      ", " . get_text('manager_date', $form['manager_date']) .
	      ", " . get_textarea('comment', $form['comment']) .
	      ", " . get_bool('approve', $form['approve']) .
	      ", " . get_text('approve_date', $form['approve_date']);
      }
    $sql .= ", lastchange = 'today'::date";
    $sql .= " WHERE appid = '" . $form['appid'] . "'";

    if (! ($result = pg_exec($db, $sql))) {
      echo "Problem with interrogating database: ", pg_ErrorMessage($db), "<BR>\n";
      echo "SQL was: $sql<BR>\n";
      return FALSE;
    }
    if (($tuples = pg_CmdTuples($result)) != 1) {
      echo "One row should be effected but $tuples rows were<BR>\n";
      return FALSE;
    }

    $sql = "UPDATE members SET " . get_bool('sub_private', $form['sub_private']) .
           "WHERE email = '$email'";
    $result = pg_exec($db, $sql);

    echo "<P>Application information successfully updated.<P>";
    return TRUE;
  }


  $db = open_db();
?>
#use wml::nmpage title="SPI Membership - Application Status"
<?
  if (!isset($_SESSION['s_username'])) {
?>
<P>You do not have permission to view this page.  The problem is
session management failed or timed out.
<?
  } else { #sess reg
    $mgr_only = FALSE;
    $what = $_REQUEST['what'];
    $user = $_REQUEST['user'];
    $appid = $_REQUEST['appid'];
    $form = $_REQUEST['form'];
    if (isset($_SESSION["s_ismanager"])) { $mgr_only = TRUE; }
    # Did they click the apply?
    if ($what == 'newapply') {
      // We can use s_username here as only applicants can apply themselves
      $oldappid = get_latest_application($db, $_SESSION["s_username"]);
      if ($oldappid == -1) {
        $appid = create_contrib_application($db, $_SESSION["s_username"]);
      } else {
        echo "<p>You have already applied for contributing membership, please use application #$oldappid instead.</p>\n";
	$appid = $oldappid;
      }
    }
    # Did the user click on update?
    if ($what == 'update') {
      update_application($db, $form, $mgr_only, $_SESSION["s_username"]);
      $appid = $form['appid'];
      if ($mgr_only == TRUE) {
        $user = $form['email'];
      }
    }
  if ($user == '' || !isset($_SESSION["s_ismanager"])) {
    $user = $_SESSION["s_username"];
  }

  if (! get_application($db, $user, $appid)) {
    print "Problem getting your application from the database<BR>\n";
  } else {
    print "<BR><H1>Application $appid Details</H1>\n";
?>
    <FORM method="post" action="application.php?<?=session_id()?>">
    <INPUT type="hidden" name="what" value="update">
<?
    print "<INPUT type=\"hidden\" name=\"form[appid]\" value=\"$appid\">\n";
    print "<TABLE border=\"0\" summary=\"\">\n";
    print_text('Member Name', 'memname', $row['name'], FALSE);
    print_text('Email', 'email', $row['email'], FALSE);
    print_text('Application #', 'appid', $row['appid'], FALSE);
    print "<input type=\"hidden\" name=\"form[appid]\" value=\"".$row['appid']."\">\n";
    print_text('Apply Date', 'appdate', $row['appdate'], $mgr_only);
    print_checkbox('Contrib Mem Application', 'contribapp', $row['contribapp'], $mgr_only);
    if ($row['contribapp'] == 't') {
        print "</TABLE>\n";
        print "<HR><B>Contributing Membership Application Details</B>\n";
        print "<TABLE border=\"0\" summary=\"\">\n";
        print_textbox('Contributions', 'contrib', $row['contrib'], TRUE);
        print_bool('Subscribe to spi-private?', 'sub_private', $row['sub_private'], TRUE);

        if ($mgr_only) {
          if (! ($result = pg_query($db,
                  'SELECT memid, email FROM members WHERE ismanager = true'))) {
            echo "Problem with interrogating database: ", pg_ErrorMessage($db), "<BR>\n";
            return FALSE;
          }

         echo "<TR><TD width=\"200\"><B>Manager:</B> </TD><TD width=\"400\"> ";
	 echo "<SELECT NAME = \"form[manager]\">";
	 echo "<OPTION VALUE=\"\">none\n";
	 $rows = pg_NumRows($result);
	 for ($i = 0 ; $i < $rows ; $i++) {
	    $info = pg_Fetch_Array($result, $i);
	    $sel = "";
	    if ($row['manager'] == $info["memid"]) {
	        $sel = "SELECTED";
	    }
	    print "<OPTION VALUE=\"".$info["memid"]. "\" $sel>".$info["email"]."\n";
        }
	print "</SELECT>\n";
	echo "</TD></TR>\n";
     } else {
       print_text('Manager', 'manager', get_manager($db, $row['manager']), FALSE);
     }

	print_text('Date Assigned', 'manager_date', $row['manager_date'], $mgr_only);
        print_textbox('Mgr Comments', 'comment', $row['comment'], $mgr_only);
	print_bool('Approved', 'approve', $row['approve'], $mgr_only);
	print_text('Date Approved', 'approve_date', $row['approve_date'], $mgr_only);
    } else { #noncontrib
        print_text('Email Check Sent on', 'emailkey', $row['emailkey_date'], FALSE);
        print_bool('Valid Email?', 'validemail', $row['validemail'], FALSE);
        print_text('Email Check on', 'validemail_date', $row['validemail_date'], FALSE);
     } # contrib
     print_text('Last Changed', 'lastchange', $row['lastchange'], FALSE);
     print "</TABLE>\n";
     print '<input type="hidden" name="form[email]" value="'. $row['email']. "\">\n";
     if ($mgr_only || $row['contribapp'] == 't' ) {
       print "<INPUT type=\"submit\" value=\"Update\">\n";
     }
     print "</form>\n";

    } # get mem
  } #sess reg 
?>

